/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function() {
    var o = function(k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v); return o },
        $V0 = [1, 10],
        $V1 = [2, 28],
        $V2 = [1, 6],
        $V3 = [1, 8],
        $V4 = [1, 9],
        $V5 = [1, 12],
        $V6 = [1, 13],
        $V7 = [1, 14],
        $V8 = [1, 15],
        $V9 = [1, 16],
        $Va = [1, 17],
        $Vb = [2, 5, 9, 11, 30, 42, 43, 44, 45, 46, 47],
        $Vc = [1, 22],
        $Vd = [1, 24],
        $Ve = [30, 39, 40],
        $Vf = [2, 43],
        $Vg = [1, 28],
        $Vh = [2, 5, 9, 11, 30, 33, 42, 43, 44, 45, 46, 47],
        $Vi = [1, 38];
    var parser = {
        trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "inicio": 3, "lista_bloques": 4, "EOF": 5, "bloque": 6, "asignacion": 7, "declaracion": 8, "structs": 9, "funciones": 10, "metodos": 11, "instrucciones": 12, "instruccion": 13, "imprimir": 14, "if": 15, "switch": 16, "while": 17, "do_while": 18, "for": 19, "RBREAK": 20, "PUNTOYCOMA": 21, "RCONTINUE": 22, "RRETURN": 23, "expresion": 24, "RPRINT": 25, "PARIZQ": 26, "CADENA": 27, "PARDER": 28, "tipo_dato": 29, "IDENTIFICADOR": 30, "parametros": 31, "LLAVEIZQ": 32, "LLAVEDER": 33, "lista_parametros": 34, "COMA": 35, "params": 36, "IGUAL": 37, "PUNTO": 38, "declaracion_varia": 39, "CORIZQ": 40, "CORDER": 41, "RINT": 42, "RDOUBLE": 43, "RBOOLEAN": 44, "RSTRING": 45, "RCHAR": 46, "RVOID": 47, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 9: "structs", 11: "metodos", 15: "if", 16: "switch", 17: "while", 18: "do_while", 19: "for", 20: "RBREAK", 21: "PUNTOYCOMA", 22: "RCONTINUE", 23: "RRETURN", 25: "RPRINT", 26: "PARIZQ", 27: "CADENA", 28: "PARDER", 30: "IDENTIFICADOR", 32: "LLAVEIZQ", 33: "LLAVEDER", 34: "lista_parametros", 35: "COMA", 37: "IGUAL", 38: "PUNTO", 39: "declaracion_varia", 40: "CORIZQ", 41: "CORDER", 42: "RINT", 43: "RDOUBLE", 44: "RBOOLEAN", 45: "RSTRING", 46: "RCHAR", 47: "RVOID" },
        productions_: [0, [3, 2],
            [4, 2],
            [4, 1],
            [6, 1],
            [6, 1],
            [6, 1],
            [6, 1],
            [6, 1],
            [12, 2],
            [12, 1],
            [13, 1],
            [13, 1],
            [13, 1],
            [13, 1],
            [13, 1],
            [13, 1],
            [13, 1],
            [13, 1],
            [13, 2],
            [13, 2],
            [13, 2],
            [13, 3],
            [14, 5],
            [10, 8],
            [31, 3],
            [31, 1],
            [36, 2],
            [7, 0],
            [7, 4],
            [7, 6],
            [7, 1],
            [8, 3],
            [8, 5],
            [8, 5],
            [8, 7],
            [29, 1],
            [29, 1],
            [29, 1],
            [29, 1],
            [29, 1],
            [29, 1],
            [29, 1],
            [24, 0]
        ],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {}
        },
        table: [{ 2: $V0, 3: 1, 4: 2, 5: $V1, 6: 3, 7: 4, 8: 5, 9: $V2, 10: 7, 11: $V3, 29: 11, 30: $V4, 42: $V5, 43: $V6, 44: $V7, 45: $V8, 46: $V9, 47: $Va }, { 1: [3] }, { 2: $V0, 5: [1, 18], 6: 19, 7: 4, 8: 5, 9: $V2, 10: 7, 11: $V3, 29: 11, 30: $V4, 42: $V5, 43: $V6, 44: $V7, 45: $V8, 46: $V9, 47: $Va }, o($Vb, [2, 3]), o($Vb, [2, 4]), o($Vb, [2, 5]), o($Vb, [2, 6]), o($Vb, [2, 7]), o($Vb, [2, 8]), { 37: [1, 20], 38: [1, 21] }, o([2, 5, 9, 11, 30, 33, 39, 40, 42, 43, 44, 45, 46, 47], [2, 31]), { 30: [1, 23], 39: $Vc, 40: $Vd }, o($Ve, [2, 36]), o($Ve, [2, 37]), o($Ve, [2, 38]), o($Ve, [2, 39]), o($Ve, [2, 40]), o($Ve, [2, 41]), { 1: [2, 1] }, o($Vb, [2, 2]), { 21: $Vf, 24: 25 }, { 30: [1, 26] }, { 21: [1, 27] }, { 26: [1, 29], 37: $Vg }, { 41: [1, 30] }, { 21: [1, 31] }, { 37: [1, 32] }, o($Vh, [2, 32]), { 21: $Vf, 24: 33 }, { 2: $Vi, 29: 37, 31: 34, 34: [1, 35], 36: 36, 42: $V5, 43: $V6, 44: $V7, 45: $V8, 46: $V9, 47: $Va }, { 30: [1, 40], 39: [1, 39] }, o($Vh, [2, 29]), { 21: $Vf, 24: 41 }, { 21: [1, 42] }, { 28: [1, 43] }, { 35: [1, 44] }, { 28: [2, 26] }, { 30: [1, 45] }, { 30: [2, 42] }, { 21: [1, 46] }, { 37: [1, 47] }, { 21: [1, 48] }, o($Vh, [2, 33]), { 32: [1, 49] }, { 2: $Vi, 29: 37, 36: 50, 42: $V5, 43: $V6, 44: $V7, 45: $V8, 46: $V9, 47: $Va }, { 28: [2, 27] }, o($Vh, [2, 34]), { 21: $Vf, 24: 51 }, o($Vh, [2, 30]), { 2: $V0, 7: 55, 8: 54, 13: 52, 14: 53, 15: [1, 56], 16: [1, 57], 17: [1, 58], 18: [1, 59], 19: [1, 60], 20: [1, 61], 22: [1, 62], 23: [1, 63], 25: [1, 64], 29: 65, 30: $V4, 33: $V1, 42: $V5, 43: $V6, 44: $V7, 45: $V8, 46: $V9, 47: $Va }, { 28: [2, 25] }, { 21: [1, 66] }, { 33: [1, 67] }, { 33: [2, 11] }, { 33: [2, 12] }, { 33: [2, 13] }, { 33: [2, 14] }, { 33: [2, 15] }, { 33: [2, 16] }, { 33: [2, 17] }, { 33: [2, 18] }, { 21: [1, 68] }, { 21: [1, 69] }, { 21: [1, 70], 24: 71 }, { 26: [1, 72] }, { 30: [1, 73], 39: $Vc, 40: $Vd }, o($Vh, [2, 35]), o($Vb, [2, 24]), { 33: [2, 19] }, { 33: [2, 20] }, { 33: [2, 21] }, { 21: [1, 74] }, { 27: [1, 75] }, { 37: $Vg }, { 33: [2, 22] }, { 28: [1, 76] }, { 21: [1, 77] }, { 33: [2, 23] }],
        defaultActions: { 18: [2, 1], 36: [2, 26], 38: [2, 42], 45: [2, 27], 50: [2, 25], 53: [2, 11], 54: [2, 12], 55: [2, 13], 56: [2, 14], 57: [2, 15], 58: [2, 16], 59: [2, 17], 60: [2, 18], 68: [2, 19], 69: [2, 20], 70: [2, 21], 74: [2, 22], 77: [2, 23] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [], // token stack
                vstack = [null], // semantic value stack
                lstack = [], // location stack
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;

            var args = lstack.slice.call(arguments, 1);

            //this.reductionCount = this.shiftCount = 0;

            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            // copy state
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }

            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);

            var ranges = lexer.options && lexer.options.ranges;

            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }

            _token_stack:
                var lex = function() {
                    var token;
                    token = lexer.lex() || EOF;
                    // if token isn't its numeric value, convert
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                }

            var symbol, preErrorSymbol, state, action, a, r, yyval = {},
                p, len, newState, expected;
            while (true) {
                // retreive state number from top of stack
                state = stack[stack.length - 1];

                // use default actions if available
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    // read action for current state and first input
                    action = table[state] && table[state][symbol];
                }

                _handle_error:
                    // handle parse error
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                        var error_rule_depth;
                        var errStr = '';

                        // Return the rule stack depth where the nearest error rule can be found.
                        // Return FALSE when no error recovery rule was found.
                        function locateNearestErrorRecoveryRule(state) {
                            var stack_probe = stack.length - 1;
                            var depth = 0;

                            // try to recover from error
                            for (;;) {
                                // check for error recovery rule in this state
                                if ((TERROR.toString()) in table[state]) {
                                    return depth;
                                }
                                if (state === 0 || stack_probe < 2) {
                                    return false; // No suitable error recovery rule available.
                                }
                                stack_probe -= 2; // popStack(1): [symbol, action]
                                state = stack[stack_probe];
                                ++depth;
                            }
                        }

                        if (!recovering) {
                            // first see if there's any chance at hitting an error recovery rule:
                            error_rule_depth = locateNearestErrorRecoveryRule(state);

                            // Report error
                            expected = [];
                            for (p in table[state]) {
                                if (this.terminals_[p] && p > TERROR) {
                                    expected.push("'" + this.terminals_[p] + "'");
                                }
                            }
                            if (lexer.showPosition) {
                                errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                            } else {
                                errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                    (symbol == EOF ? "end of input" :
                                        ("'" + (this.terminals_[symbol] || symbol) + "'"));
                            }
                            this.parseError(errStr, {
                                text: lexer.match,
                                token: this.terminals_[symbol] || symbol,
                                line: lexer.yylineno,
                                loc: yyloc,
                                expected: expected,
                                recoverable: (error_rule_depth !== false)
                            });
                        } else if (preErrorSymbol !== EOF) {
                            error_rule_depth = locateNearestErrorRecoveryRule(state);
                        }

                        // just recovered from another error
                        if (recovering == 3) {
                            if (symbol === EOF || preErrorSymbol === EOF) {
                                throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                            }

                            // discard current lookahead and grab another
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            symbol = lex();
                        }

                        // try to recover from error
                        if (error_rule_depth === false) {
                            throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                        }
                        popStack(error_rule_depth);

                        preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                        symbol = TERROR; // insert generic error symbol as new lookahead
                        state = stack[stack.length - 1];
                        action = table[state] && table[state][TERROR];
                        recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
                    }

                    // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }

                switch (action[0]) {
                    case 1: // shift
                        //this.shiftCount++;

                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]); // push state
                        symbol = null;
                        if (!preErrorSymbol) { // normal execution/no error
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            // error just occurred, resume old lookahead f/ before error
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;

                    case 2:
                        // reduce
                        //this.reductionCount++;

                        len = this.productions_[action[1]][1];

                        // perform semantic action
                        yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                        // default location, uses first token for firsts, last for lasts
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                        if (typeof r !== 'undefined') {
                            return r;
                        }

                        // pop off stack
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }

                        stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;

                    case 3:
                        // accept
                        return true;
                }

            }

            return true;
        }
    };

    //Importaciones

    /* generated by jison-lex 0.3.4 */
    var lexer = (function() {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
                        oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function(match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-sensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        /*Se ignoran comentarios simples*/
                        break;
                    case 1:
                        /*Se ignoran comentarios multiples*/
                        break;
                    case 2:
                        return 38
                        break;
                    case 3:
                        return 35
                        break;
                    case 4:
                        return 21
                        break;
                    case 5:
                        return 32
                        break;
                    case 6:
                        return 33
                        break;
                    case 7:
                        return 26
                        break;
                    case 8:
                        return 28
                        break;
                    case 9:
                        return 40
                        break;
                    case 10:
                        return 41
                        break;
                    case 11:
                        return 'MASMAS'
                        break;
                    case 12:
                        return 'MENOSMENOS'
                        break;
                    case 13:
                        return 'MAS'
                        break;
                    case 14:
                        return 'MENOS'
                        break;
                    case 15:
                        return 'POR'
                        break;
                    case 16:
                        return 'DIV'
                        break;
                    case 17:
                        return 'MOD'
                        break;
                    case 18:
                        return 'IGUALIGUAL'
                        break;
                    case 19:
                        return 37
                        break;
                    case 20:
                        return 'NOIGUAL'
                        break;
                    case 21:
                        return 'MAYORIGUAL'
                        break;
                    case 22:
                        return 'MENORIGUAL'
                        break;
                    case 23:
                        return 'MAYORQUE'
                        break;
                    case 24:
                        return 'MENORQUE'
                        break;
                    case 25:
                        return 'AND'
                        break;
                    case 26:
                        return 'OR'
                        break;
                    case 27:
                        return 'NOT'
                        break;
                    case 28:
                        return 'CONCAT'
                        break;
                    case 29:
                        return 'POTENCIA'
                        break;
                    case 30:
                        return 'TERNARIO'
                        break;
                    case 31:
                        return 'DOSPUNTOS'
                        break;
                    case 32:
                        return 'DOLAR'
                        break;
                    case 33:
                        return 'HASHTAG'
                        break;
                    case 34:
                        return 'RNULL'
                        break;
                    case 35:
                        return 'RTRUE'
                        break;
                    case 36:
                        return 'RFALSE'
                        break;
                    case 37:
                        return 42
                        break;
                    case 38:
                        return 43
                        break;
                    case 39:
                        return 44
                        break;
                    case 40:
                        return 46
                        break;
                    case 41:
                        return 45
                        break;
                    case 42:
                        return 47
                        break;
                    case 43:
                        return 'RPOW'
                        break;
                    case 44:
                        return 'RSQRT'
                        break;
                    case 45:
                        return 'RSIN'
                        break;
                    case 46:
                        return 'RCOS'
                        break;
                    case 47:
                        return 'RTAN'
                        break;
                    case 48:
                        return 'RLOG10'
                        break;
                    case 49:
                        return 'RCARACTEROFPOSITION'
                        break;
                    case 50:
                        return 'RSUBSTRING'
                        break;
                    case 51:
                        return 'RLENGTH'
                        break;
                    case 52:
                        return 'RTOUPPER'
                        break;
                    case 53:
                        return 'RTOLOWER'
                        break;
                    case 54:
                        return 'RPRINTLN'
                        break;
                    case 55:
                        return 25
                        break;
                    case 56:
                        return 'RPARSE'
                        break;
                    case 57:
                        return 'RTOINT'
                        break;
                    case 58:
                        return 'RTODOUBLE'
                        break;
                    case 59:
                        return 'RSTRINGMIN'
                        break;
                    case 60:
                        return 'RTYPEOF'
                        break;
                    case 61:
                        return 'RFUNCTION'
                        break;
                    case 62:
                        return 23
                        break;
                    case 63:
                        return 'RIF'
                        break;
                    case 64:
                        return 'RELSE'
                        break;
                    case 65:
                        return 'RSWITCH'
                        break;
                    case 66:
                        return 'RCASE'
                        break;
                    case 67:
                        return 20
                        break;
                    case 68:
                        return 22
                        break;
                    case 69:
                        return 'RDEFAULT'
                        break;
                    case 70:
                        return 'RWHILE'
                        break;
                    case 71:
                        return 'RDO'
                        break;
                    case 72:
                        return 'RFOR'
                        break;
                    case 73:
                        return 'RIN'
                        break;
                    case 74:
                        return 'RBEGIN'
                        break;
                    case 75:
                        return 'REND'
                        break;
                    case 76:
                        return 'RPUSH'
                        break;
                    case 77:
                        return 'RPOP'
                        break;
                    case 78:
                        return 'RMAIN'
                        break;
                    case 79:
                        /*Se ignoran espacios en blanco*/
                        break;
                    case 80:
                        return 27;
                        break;
                    case 81:
                        return 'CARACTER';
                        break;
                    case 82:
                        return 'DECIMAL';
                        break;
                    case 83:
                        return 'ENTERO';
                        break;
                    case 84:
                        return 30;
                        break;
                    case 85:
                        return 5;
                        break;
                    case 86:
                        console.error("Error lexico: " + yy_.yytext + ", en linea: " + yy_.yylloc.first_line + ", y columna: " + yy_.yylloc.first_column + "\n");
                        break;
                }
            },
            rules: [/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/.*\r))/, /^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/, /^(?:\.)/, /^(?:,)/, /^(?:;)/, /^(?:\{)/, /^(?:\})/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\+\+)/, /^(?:--)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:%)/, /^(?:==)/, /^(?:=)/, /^(?:!=)/, /^(?:>=)/, /^(?:<=)/, /^(?:>)/, /^(?:<)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:!)/, /^(?:&)/, /^(?:\^)/, /^(?:\?)/, /^(?::)/, /^(?:\$)/, /^(?:#)/, /^(?:null\b)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:int\b)/, /^(?:double\b)/, /^(?:boolean\b)/, /^(?:char\b)/, /^(?:String\b)/, /^(?:void\b)/, /^(?:pow\b)/, /^(?:sqrt\b)/, /^(?:sin\b)/, /^(?:cos\b)/, /^(?:tan\b)/, /^(?:log10\b)/, /^(?:caracterOfPosition\b)/, /^(?:subString\b)/, /^(?:length\b)/, /^(?:toUppercase\b)/, /^(?:toLowercase\b)/, /^(?:println\b)/, /^(?:print\b)/, /^(?:parse\b)/, /^(?:toInt\b)/, /^(?:toDouble\b)/, /^(?:string\b)/, /^(?:typeof\b)/, /^(?:function\b)/, /^(?:return\b)/, /^(?:if\b)/, /^(?:else\b)/, /^(?:switch\b)/, /^(?:case\b)/, /^(?:break\b)/, /^(?:continue\b)/, /^(?:default\b)/, /^(?:while\b)/, /^(?:do\b)/, /^(?:for\b)/, /^(?:in\b)/, /^(?:begin\b)/, /^(?:end\b)/, /^(?:push\b)/, /^(?:pop\b)/, /^(?:main\b)/, /^(?:[ \n\r\t]+)/, /^(?:[\"]([^\"\n]|(\\")|(\\'))*[\"])/, /^(?:[\'][^\'\n][\'])/, /^(?:[0-9]+[.][0-9]+)/, /^(?:[0-9]+)/, /^(?:[a-zA-Z"_"]+["_"0-9A-Za-z]*)/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = gramatica;
    exports.Parser = gramatica.Parser;
    exports.parse = function() { return gramatica.parse.apply(gramatica, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}